
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.xml.datatype.XMLGregorianCalendar;
import org.netbeans.xml.schema.shares.Share;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author steppy
 */
public class SharesGUI extends javax.swing.JFrame {

    /**
     * Creates new form SharesGUI
    */
    
    /**
     * Global variables as they need to be used in multiple places, including
     * in some GUI events, which have no way to pass them in as parameters
     */
    String preferredCurrency = "USD";
    double conversionRate = 1.0;
    
    public SharesGUI() {
        initComponents();
        // Sets the GUI to automatically fill the screen
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        invalidInputLabel.setVisible(false);
        Create_Listeners();
        Initialise_Table();
        
        /**
         * Uses threads to keep displaying the table in case any values are changed
         * either by the user or by a different client and to get real-time share
         * prices from the UpdateStockPricesWS which utilises the Yahoo Finance API.
         * Currently restricted to every second for refreshing the table to reduce
         * unnecessary load. The web service call is limited to 30 seconds to 
         * prevent exceeding the limit of free API calls.
         */

        ScheduledExecutorService tableRefresh = Executors.newScheduledThreadPool(1);
        tableRefresh.scheduleAtFixedRate(new Runnable(){
            private int time = 0;
            @Override
            public void run(){
                Update_Table();
                }
            }, 0, 500, TimeUnit.MILLISECONDS);
        
        ScheduledExecutorService priceRefresh = Executors.newScheduledThreadPool(1);
        priceRefresh.scheduleAtFixedRate(new Runnable(){
            private int time = 0;
            @Override
            public void run(){
                updateStockPrices();
                }
            }, 0, 30000, TimeUnit.MILLISECONDS);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SharesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SharesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SharesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SharesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
  
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SharesGUI().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sharesTable = new javax.swing.JTable();
        companyNameTextField = new javax.swing.JTextField();
        companySymbolTextField = new javax.swing.JTextField();
        numSharesTextField = new javax.swing.JTextField();
        searchLabelCN = new javax.swing.JLabel();
        searchLabelCS = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        sharesLabel = new javax.swing.JLabel();
        buySharesButton = new javax.swing.JButton();
        sellSharesButton = new javax.swing.JButton();
        invalidInputLabel = new javax.swing.JLabel();
        addCompanyButton = new javax.swing.JButton();
        currConvLabel = new javax.swing.JLabel();
        currConvFromBox = new javax.swing.JTextField();
        currConvToLabel = new javax.swing.JLabel();
        currConvToBox = new javax.swing.JTextField();
        currAmountLabel = new javax.swing.JLabel();
        currConvAmountBox = new javax.swing.JTextField();
        currConvAmountLabel = new javax.swing.JLabel();
        currConvButton = new javax.swing.JToggleButton();
        preferredCurrencyLabel = new javax.swing.JLabel();
        preferredCurrencyTextField = new javax.swing.JTextField();
        changeCurrencyButton = new javax.swing.JButton();
        wikipediaDescriptionLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        wikipediaSummaryTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shares Broker");
        setLocation(new java.awt.Point(240, 100));
        setMinimumSize(new java.awt.Dimension(1280, 720));

        refreshButton.setText("Refresh Stocks");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        List<Share> sharesList = loadSharesFromXML();
        sharesTable.setModel(new javax.swing.table.DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        }
    );
    sharesTable.setRowHeight(96);
    jScrollPane1.setViewportView(sharesTable);

    companyNameTextField.setToolTipText("Enter the name of the company that you want to search for");
    companyNameTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            companyNameTextFieldActionPerformed(evt);
        }
    });

    companySymbolTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            companySymbolTextFieldActionPerformed(evt);
        }
    });

    numSharesTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            numSharesTextFieldActionPerformed(evt);
        }
    });

    searchLabelCN.setText("Company Name:");

    searchLabelCS.setText("Company Symbol:");

    searchButton.setText("SEARCH");
    searchButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchButtonActionPerformed(evt);
        }
    });

    sharesLabel.setText("Available Shares: N/A");

    buySharesButton.setText("BUY");
    buySharesButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            buySharesButtonActionPerformed(evt);
        }
    });

    sellSharesButton.setText("SELL");
    sellSharesButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            sellSharesButtonActionPerformed(evt);
        }
    });

    invalidInputLabel.setText("INVALID INPUT PLEASE TRY AGAIN");

    addCompanyButton.setText("Add Company");
    addCompanyButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addCompanyButtonActionPerformed(evt);
        }
    });

    currConvLabel.setText("Currency Conversion");
    currConvLabel.setMaximumSize(new java.awt.Dimension(145, 20));
    currConvLabel.setMinimumSize(new java.awt.Dimension(145, 20));
    currConvLabel.setPreferredSize(new java.awt.Dimension(145, 20));

    currConvFromBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            currConvFromBoxActionPerformed(evt);
        }
    });

    currConvToLabel.setText("To");

    currAmountLabel.setText("Amount");
    currAmountLabel.setMaximumSize(new java.awt.Dimension(55, 20));
    currAmountLabel.setMinimumSize(new java.awt.Dimension(55, 20));
    currAmountLabel.setPreferredSize(new java.awt.Dimension(55, 20));

    currConvAmountLabel.setMaximumSize(new java.awt.Dimension(22, 23));
    currConvAmountLabel.setMinimumSize(new java.awt.Dimension(22, 23));
    currConvAmountLabel.setPreferredSize(new java.awt.Dimension(22, 23));

    currConvButton.setText("CONVERT");
    currConvButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            currConvButtonActionPerformed(evt);
        }
    });

    preferredCurrencyLabel.setText("Preferred Currency:");

    preferredCurrencyTextField.setText("USD");
    preferredCurrencyTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            preferredCurrencyTextFieldActionPerformed(evt);
        }
    });

    changeCurrencyButton.setText("GO");
    changeCurrencyButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            changeCurrencyButtonActionPerformed(evt);
        }
    });

    wikipediaDescriptionLabel.setText("Company Wikipedia Summary");

    wikipediaSummaryTextArea.setColumns(20);
    wikipediaSummaryTextArea.setLineWrap(true);
    wikipediaSummaryTextArea.setRows(20);
    wikipediaSummaryTextArea.setWrapStyleWord(true);
    wikipediaSummaryTextArea.setMaximumSize(new java.awt.Dimension(0, 0));
    wikipediaSummaryTextArea.setMinimumSize(new java.awt.Dimension(480, 200));
    jScrollPane2.setViewportView(wikipediaSummaryTextArea);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(32, 32, 32)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(searchLabelCS)
                        .addComponent(searchLabelCN)
                        .addComponent(preferredCurrencyLabel))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(companyNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(companySymbolTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(preferredCurrencyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(changeCurrencyButton)))
                            .addGap(2, 2, 2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(sharesLabel)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGap(52, 52, 52)
                    .addComponent(numSharesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(buySharesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(165, 165, 165)
                                    .addComponent(currConvLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(invalidInputLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(currConvFromBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(currConvToLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(currConvToBox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(currAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(currConvAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(currConvAmountBox, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(sellSharesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(270, 270, 270)
                            .addComponent(currConvButton)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 491, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addCompanyButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1)
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(wikipediaDescriptionLabel))))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(23, 23, 23)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchLabelCN)
                                .addComponent(companyNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addCompanyButton)
                                .addComponent(buySharesButton))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchLabelCS)
                                .addComponent(companySymbolTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(sharesLabel)
                                .addComponent(numSharesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(invalidInputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(refreshButton)))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(preferredCurrencyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sellSharesButton)
                            .addComponent(preferredCurrencyLabel)
                            .addComponent(searchButton)
                            .addComponent(changeCurrencyButton))))
                .addGroup(layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(currConvLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(currAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(currConvFromBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(currConvAmountBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(7, 7, 7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(currConvToBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(currConvToLabel)
                        .addComponent(currConvAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(currConvButton)))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(wikipediaDescriptionLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 240, Short.MAX_VALUE))
                .addComponent(jScrollPane1))
            .addContainerGap())
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        /** 
         * This function allows the user to perform a manual refresh on top of 
         * the automatic threads, it calls on the external RESTful service to 
         * directly edit the shares in the XML file and then refreshes the table
         * that is displayed.
         */
        updateStockPrices();
        Update_Table();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String companyName = companyNameTextField.getText();
        String companySymbol = companySymbolTextField.getText().toUpperCase();
        TableRowSorter tableRowSorter = new TableRowSorter<>((DefaultTableModel) sharesTable.getModel());
        RowFilter<DefaultTableModel, String> myRowFilter = null;
        
        /**
         * Sets and applies the row filter (search) based on the symbol or the 
         * name entered, prioritising the symbol as it is not case sensitive.
         */
        
        if (companySymbol.trim().length() != 0) {
            myRowFilter = RowFilter.regexFilter(companySymbol, 0);
        }
        else if (companyName.trim().length() != 0) {
            myRowFilter = RowFilter.regexFilter(companyName, 0);
        }
        tableRowSorter.setRowFilter(myRowFilter);
        sharesTable.setRowSorter(tableRowSorter);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void numSharesTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numSharesTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numSharesTextFieldActionPerformed

    private void buySharesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buySharesButtonActionPerformed
        // Initialises variable to reduce code in the try...catch
        int userShares = -1;
        try {
            userShares = Integer.parseInt(numSharesTextField.getText());
        }
        catch (NumberFormatException | NullPointerException e) {
            System.out.print(e);
        }
        // Updates the number of shares available or tells the user it failed
        if (userShares > 0) {
            invalidInputLabel.setVisible(false);
            String companySymbol = companySymbolTextField.getText();
            purchaseShares(userShares, companySymbol);
            numSharesTextField.setText("");
            Update_Table();
        }
        else {
            invalidInputLabel.setVisible(true);
        }
    }//GEN-LAST:event_buySharesButtonActionPerformed

    private void sellSharesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellSharesButtonActionPerformed
        // Initialises variable to reduce code in the try...catch
        int userShares = -1;
        try {
            userShares = Integer.parseInt(numSharesTextField.getText());
        }
        catch (NumberFormatException | NullPointerException e) {
            System.out.print(e);
        }
        // Updates the number of shares available or tells the user it failed
        if (userShares > 0) {
            invalidInputLabel.setVisible(false);
            String companySymbol = companySymbolTextField.getText();
            sellShares(userShares, companySymbol);
            numSharesTextField.setText("");
            Update_Table();
        }
        else {
            invalidInputLabel.setVisible(true);
        }
    }//GEN-LAST:event_sellSharesButtonActionPerformed

    private void companyNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_companyNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_companyNameTextFieldActionPerformed

    private void companySymbolTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_companySymbolTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_companySymbolTextFieldActionPerformed

    private void addCompanyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCompanyButtonActionPerformed
        // Allows a user to open a new window to add a new company to track
        NewCompanyGUI addCompanyWindow = new NewCompanyGUI();
        addCompanyWindow.setVisible(true);
    }//GEN-LAST:event_addCompanyButtonActionPerformed

    private void currConvFromBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currConvFromBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currConvFromBoxActionPerformed

    private void currConvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currConvButtonActionPerformed
        // Creates an object that automatically rounds a float to 2d.p.
        DecimalFormat df = new DecimalFormat("0.00");
        String fromCurr = currConvFromBox.getText().toUpperCase();
        String toCurr = currConvToBox.getText().toUpperCase();
        // Calls on the MyCurrencyConversionWS to get the conversion rate
        double localConvRate = getConversionRate(fromCurr, toCurr);
        double userValue = 1;
        try {
            userValue = Double.parseDouble(currConvAmountBox.getText());
        }
        catch (NumberFormatException | NullPointerException e) {
            System.out.print(e);
        }
        // Prints the converted result to 2d.p.
        currConvAmountLabel.setText(df.format(userValue * localConvRate));
    }//GEN-LAST:event_currConvButtonActionPerformed

    private void preferredCurrencyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferredCurrencyTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_preferredCurrencyTextFieldActionPerformed

    private void changeCurrencyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeCurrencyButtonActionPerformed
        /**
         * Updates the preferred currency to the user's input and attempts to get 
         * the conversion rate.
        */
        String oldCurrency = preferredCurrency;
        preferredCurrency = preferredCurrencyTextField.getText().toUpperCase();
        conversionRate = getConversionRate(oldCurrency, preferredCurrency);
    }//GEN-LAST:event_changeCurrencyButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCompanyButton;
    private javax.swing.JButton buySharesButton;
    private javax.swing.JButton changeCurrencyButton;
    protected javax.swing.JTextField companyNameTextField;
    protected javax.swing.JTextField companySymbolTextField;
    private javax.swing.JLabel currAmountLabel;
    private javax.swing.JTextField currConvAmountBox;
    private javax.swing.JLabel currConvAmountLabel;
    private javax.swing.JToggleButton currConvButton;
    private javax.swing.JTextField currConvFromBox;
    private javax.swing.JLabel currConvLabel;
    private javax.swing.JTextField currConvToBox;
    private javax.swing.JLabel currConvToLabel;
    private javax.swing.JLabel invalidInputLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField numSharesTextField;
    private javax.swing.JLabel preferredCurrencyLabel;
    private javax.swing.JTextField preferredCurrencyTextField;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchLabelCN;
    private javax.swing.JLabel searchLabelCS;
    private javax.swing.JButton sellSharesButton;
    private javax.swing.JLabel sharesLabel;
    protected javax.swing.JTable sharesTable;
    private javax.swing.JLabel wikipediaDescriptionLabel;
    private javax.swing.JTextArea wikipediaSummaryTextArea;
    // End of variables declaration//GEN-END:variables

    
    private static List<Share> loadSharesFromXML() {
        org.me.sharesbroker.SharesBrokerWS_Service service = new org.me.sharesbroker.SharesBrokerWS_Service();
        org.me.sharesbroker.SharesBrokerWS port = service.getSharesBrokerWSPort();
        List<Share> sharesList = port.loadSharesFromXML();
        return sharesList;
    }
    
    private static void purchaseShares(int numOfShares, String companySymbol) {
        org.me.sharesbroker.SharesBrokerWS_Service service = new org.me.sharesbroker.SharesBrokerWS_Service();
        org.me.sharesbroker.SharesBrokerWS port = service.getSharesBrokerWSPort();
        port.purchaseShares(numOfShares, companySymbol);
    }
    
    private static void sellShares(int numOfShares, String companySymbol) {
        org.me.sharesbroker.SharesBrokerWS_Service service = new org.me.sharesbroker.SharesBrokerWS_Service();
        org.me.sharesbroker.SharesBrokerWS port = service.getSharesBrokerWSPort();
        port.sellShares(numOfShares, companySymbol);
    }
    
    private void Initialise_Table() {
        // Creates the table model, setting up the column names and sorting system
        sharesTable.setModel(new DefaultTableModel(new Object[0][], new String[] {
                "Company Name", "Company Symbol", "Available Shares", 
                "Currency", "Price", "Last Updated"}) {
            Class[] types = { String.class, String.class, Integer.class,
                    String.class, Double.class, XMLGregorianCalendar.class };

            @Override
            public Class getColumnClass(int columnIndex) {
                return this.types[columnIndex];
            }

            public boolean isCellEditable(int columnIndex) {
                return false;
            }
        });
        sharesTable.setAutoCreateRowSorter(true);
    }
    
    private void Update_Table() {
        // Uses the SharesBrokeringWebService to unmarshall and load the shares
        List<Share> sharesList = loadSharesFromXML();
        
        DefaultTableModel myModel = (DefaultTableModel) sharesTable.getModel();
        
        for (int i = 0; i < sharesList.size(); i++) {
            // Creates a new empty row to change the values of
            if (myModel.getRowCount() < sharesList.size())
            {
                myModel.addRow(new Object[][]{
                    {null, null, null, null, null, null}
                });
            }
            // Just a temporary object to help reduce code line length
            Share myShare = sharesList.get(i);
            
            // Starts setting the correct values of the row
            myModel.setValueAt(myShare.getCompanyName(), i, 0);
            myModel.setValueAt(myShare.getCompanySymbol(), i, 1);
            myModel.setValueAt(myShare.getAvailableShares(), i, 2);
            
            // Default conversion rate in case the value doesn't need converting
            double convRate = 1.0;
            
            // Displays the correct currency value
            if (!myShare.getSharePrice().getCurrency().equals(preferredCurrency)) {
                myModel.setValueAt(preferredCurrency, i, 3);
                convRate = conversionRate;
            } else {
                myModel.setValueAt(myShare.getSharePrice().getCurrency(), i, 3);
            }
            
            // Finishes setting the correct row values
            myModel.setValueAt(myShare.getSharePrice().getValue() * convRate, i, 4);
            myModel.setValueAt(DateTime_To_String(myShare.getSharePrice().getLastUpdated()), i, 5);
            
            // Sets the available shares label based on the user's choice
            if (companyNameTextField.getText().equals(myShare.getCompanyName()) ||
                    companySymbolTextField.getText().equals(myShare.getCompanySymbol()))
            {
                sharesLabel.setText("Available Shares: " + myShare.getAvailableShares());
            }
        }
        
    }
    
    public final void Create_Listeners() {
        /**
         * Sets up a mouse listener on the table to allow a user to select a 
         * company by clicking on the table directly - it then automatically
         * fills the correct text boxes and labels as well as calling the Wikipedia
         * web service that accesses the API.
         */
        sharesTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                JTable target = (JTable)e.getSource();
                int row = target.getSelectedRow();
                companyNameTextField.setText(target.getValueAt(row, 0).toString());
                companySymbolTextField.setText(target.getValueAt(row, 1).toString());
                sharesLabel.setText("Available Shares: " + 
                        target.getValueAt(row, 2).toString());
                // Finds and uses the correct Wikipedia ID to call the web service accessing the API
                String wikipediaName = Find_Wikipedia_Name(target.getValueAt(row, 1).toString());
                if (wikipediaName != null) {
                    String wikiSummary = getWikipediaSummary(wikipediaName);
                    if (wikiSummary.isEmpty()) {
                        wikipediaSummaryTextArea.setText("Invalid Wikipedia ID");
                    }
                    else {
                        wikipediaSummaryTextArea.setText(wikiSummary);
                    }
                }
            }
        });
        /**
         * Sets up mouse press listeners for various text fields so that they
         * automatically clear themselves when a user clicks on them.
         */
        companyNameTextField.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e){
                companyNameTextField.setText("");
                companySymbolTextField.setText("");
            }
        });
        companySymbolTextField.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e){
                companyNameTextField.setText("");
                companySymbolTextField.setText("");
            }
        });
        numSharesTextField.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e){
                numSharesTextField.setText("");
            }
        });
        preferredCurrencyTextField.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e){
                preferredCurrencyTextField.setText("");
            }
        });
        currConvFromBox.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e){
                currConvFromBox.setText("");
            }
        });
        currConvToBox.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e){
                currConvToBox.setText("");
            }
        });
    }
    
    public String Find_Wikipedia_Name(String companySymbol) {
        List<Share> sharesList = loadSharesFromXML();
        for (int i = 0; i < sharesList.size(); i++) {
            if (sharesList.get(i).getCompanySymbol().equals(companySymbol)) {
                String tempString = sharesList.get(i).getWikipediaName();
                return sharesList.get(i).getWikipediaName();
            }
        }
        return null;
    }
    
    public String DateTime_To_String(XMLGregorianCalendar dateTime) {
        /**
         * Internal function to convert Gregorian time to a more user-friendly
         * date and time that can be displayed
         */
        GregorianCalendar gregCal = dateTime.toGregorianCalendar();
        SimpleDateFormat dateFormatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        dateFormatter.setTimeZone(gregCal.getTimeZone());
        String strDateTime = dateFormatter.format(gregCal.getTime());
        return strDateTime;
    }

    private static double getConversionRate(java.lang.String oldCurrency, java.lang.String newCurrency) {
        mycurrencyconverter.MyCurrencyConversionWS_Service service = new mycurrencyconverter.MyCurrencyConversionWS_Service();
        mycurrencyconverter.MyCurrencyConversionWS port = service.getMyCurrencyConversionWSPort();
        return port.getConversionRate(oldCurrency, newCurrency);
    }

    private static void updateStockPrices() {
        stockpricews.UpdateStockPricesWS_Service service = new stockpricews.UpdateStockPricesWS_Service();
        stockpricews.UpdateStockPricesWS port = service.getUpdateStockPricesWSPort();
        port.updateStockPrices();
    }

    private static String getWikipediaSummary(java.lang.String wikipediaTitle) {
        wikipediasummary.WikipediaSummaryWS_Service service = new wikipediasummary.WikipediaSummaryWS_Service();
        wikipediasummary.WikipediaSummaryWS port = service.getWikipediaSummaryWSPort();
        return port.getWikipediaSummary(wikipediaTitle);
    }
    
}